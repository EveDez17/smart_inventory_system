# Generated by Django 5.0.3 on 2024-04-22 18:21

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("inventory", "0001_initial"),
        ("storage", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="historicalaisle",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicallocation",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalrack",
            name="aisle",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="storage.aisle",
                verbose_name="Aisle",
            ),
        ),
        migrations.AddField(
            model_name="historicalrack",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalzone",
            name="category",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="inventory.category",
            ),
        ),
        migrations.AddField(
            model_name="historicalzone",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicallocation",
            name="level",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="storage.level",
            ),
        ),
        migrations.CreateModel(
            name="PNDLocation",
            fields=[
                (
                    "location_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="storage.location",
                    ),
                ),
                (
                    "temperature_range",
                    models.CharField(
                        blank=True,
                        default="default-range",
                        help_text="Suitable temperature range for this location, e.g., '0-4Â°C' for chilled.",
                        max_length=50,
                        null=True,
                        verbose_name="Temperature Range",
                    ),
                ),
                (
                    "capacity",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum capacity of the location. Useful for space management.",
                        null=True,
                        verbose_name="Capacity",
                    ),
                ),
                (
                    "restrictions",
                    models.TextField(
                        blank=True,
                        help_text="Any specific restrictions for this location, such as 'No flammable products'.",
                        null=True,
                        verbose_name="Restrictions",
                    ),
                ),
            ],
            bases=("storage.location",),
        ),
        migrations.AddField(
            model_name="location",
            name="level",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="locations",
                to="storage.level",
            ),
        ),
        migrations.AddField(
            model_name="rack",
            name="aisle",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="racks",
                to="storage.aisle",
                verbose_name="Aisle",
            ),
        ),
        migrations.AddField(
            model_name="level",
            name="rack",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="levels",
                to="storage.rack",
            ),
        ),
        migrations.AddField(
            model_name="sensor",
            name="location",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="sensors",
                to="storage.location",
            ),
        ),
        migrations.AddField(
            model_name="sensordata",
            name="sensor",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="data",
                to="storage.sensor",
            ),
        ),
        migrations.AddField(
            model_name="zone",
            name="category",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="inventory.category",
            ),
        ),
        migrations.AddField(
            model_name="historicalaisle",
            name="zone",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="storage.zone",
                verbose_name="Zone",
            ),
        ),
        migrations.AddField(
            model_name="aisle",
            name="zone",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="aisles",
                to="storage.zone",
                verbose_name="Zone",
            ),
        ),
        migrations.CreateModel(
            name="PickFace",
            fields=[
                (
                    "location_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="storage.location",
                    ),
                ),
                (
                    "pick_face_code",
                    models.CharField(
                        max_length=50, unique=True, verbose_name="Pick Face Code"
                    ),
                ),
                (
                    "current_stock",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Current Stock"
                    ),
                ),
                (
                    "low_stock_threshold",
                    models.PositiveIntegerField(
                        default=10, verbose_name="Low Stock Threshold"
                    ),
                ),
                (
                    "target_stock_level",
                    models.PositiveIntegerField(
                        default=100, verbose_name="Target Stock Level"
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pick_faces",
                        to="inventory.category",
                        verbose_name="Category",
                    ),
                ),
                (
                    "parent_location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="child_pick_faces",
                        to="storage.pickface",
                        verbose_name="Parent Location",
                    ),
                ),
                (
                    "pick_faces",
                    models.ManyToManyField(
                        blank=True,
                        to="storage.pickface",
                        verbose_name="Related Pick Faces",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pick_faces",
                        to="inventory.foodproduct",
                        verbose_name="Product",
                    ),
                ),
            ],
            bases=("storage.location",),
        ),
        migrations.AlterUniqueTogether(
            name="location",
            unique_together={("level", "side", "location_number")},
        ),
        migrations.AlterUniqueTogether(
            name="aisle",
            unique_together={("zone", "aisle_letter")},
        ),
    ]
